/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { FirewallRule } from "./FirewallRule";
import { FirewallRuleCountArgs } from "./FirewallRuleCountArgs";
import { FirewallRuleFindManyArgs } from "./FirewallRuleFindManyArgs";
import { FirewallRuleFindUniqueArgs } from "./FirewallRuleFindUniqueArgs";
import { CreateFirewallRuleArgs } from "./CreateFirewallRuleArgs";
import { UpdateFirewallRuleArgs } from "./UpdateFirewallRuleArgs";
import { DeleteFirewallRuleArgs } from "./DeleteFirewallRuleArgs";
import { Website } from "../../website/base/Website";
import { Tenant } from "../../tenant/base/Tenant";
import { FirewallRuleService } from "../firewallRule.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => FirewallRule)
export class FirewallRuleResolverBase {
  constructor(
    protected readonly service: FirewallRuleService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "FirewallRule",
    action: "read",
    possession: "any",
  })
  async _firewallRulesMeta(
    @graphql.Args() args: FirewallRuleCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [FirewallRule])
  @nestAccessControl.UseRoles({
    resource: "FirewallRule",
    action: "read",
    possession: "any",
  })
  async firewallRules(
    @graphql.Args() args: FirewallRuleFindManyArgs
  ): Promise<FirewallRule[]> {
    return this.service.firewallRules(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => FirewallRule, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "FirewallRule",
    action: "read",
    possession: "own",
  })
  async firewallRule(
    @graphql.Args() args: FirewallRuleFindUniqueArgs
  ): Promise<FirewallRule | null> {
    const result = await this.service.firewallRule(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => FirewallRule)
  @nestAccessControl.UseRoles({
    resource: "FirewallRule",
    action: "create",
    possession: "any",
  })
  async createFirewallRule(
    @graphql.Args() args: CreateFirewallRuleArgs
  ): Promise<FirewallRule> {
    return await this.service.createFirewallRule({
      ...args,
      data: {
        ...args.data,

        website: args.data.website
          ? {
              connect: args.data.website,
            }
          : undefined,

        tenant: args.data.tenant
          ? {
              connect: args.data.tenant,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => FirewallRule)
  @nestAccessControl.UseRoles({
    resource: "FirewallRule",
    action: "update",
    possession: "any",
  })
  async updateFirewallRule(
    @graphql.Args() args: UpdateFirewallRuleArgs
  ): Promise<FirewallRule | null> {
    try {
      return await this.service.updateFirewallRule({
        ...args,
        data: {
          ...args.data,

          website: args.data.website
            ? {
                connect: args.data.website,
              }
            : undefined,

          tenant: args.data.tenant
            ? {
                connect: args.data.tenant,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => FirewallRule)
  @nestAccessControl.UseRoles({
    resource: "FirewallRule",
    action: "delete",
    possession: "any",
  })
  async deleteFirewallRule(
    @graphql.Args() args: DeleteFirewallRuleArgs
  ): Promise<FirewallRule | null> {
    try {
      return await this.service.deleteFirewallRule(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Website, {
    nullable: true,
    name: "website",
  })
  @nestAccessControl.UseRoles({
    resource: "Website",
    action: "read",
    possession: "any",
  })
  async getWebsite(
    @graphql.Parent() parent: FirewallRule
  ): Promise<Website | null> {
    const result = await this.service.getWebsite(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Tenant, {
    nullable: true,
    name: "tenant",
  })
  @nestAccessControl.UseRoles({
    resource: "Tenant",
    action: "read",
    possession: "any",
  })
  async getTenant(
    @graphql.Parent() parent: FirewallRule
  ): Promise<Tenant | null> {
    const result = await this.service.getTenant(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
