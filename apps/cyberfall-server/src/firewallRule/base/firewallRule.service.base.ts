/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  FirewallRule as PrismaFirewallRule,
  Website as PrismaWebsite,
  Tenant as PrismaTenant,
} from "@prisma/client";

export class FirewallRuleServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.FirewallRuleCountArgs, "select">
  ): Promise<number> {
    return this.prisma.firewallRule.count(args);
  }

  async firewallRules(
    args: Prisma.FirewallRuleFindManyArgs
  ): Promise<PrismaFirewallRule[]> {
    return this.prisma.firewallRule.findMany(args);
  }
  async firewallRule(
    args: Prisma.FirewallRuleFindUniqueArgs
  ): Promise<PrismaFirewallRule | null> {
    return this.prisma.firewallRule.findUnique(args);
  }
  async createFirewallRule(
    args: Prisma.FirewallRuleCreateArgs
  ): Promise<PrismaFirewallRule> {
    return this.prisma.firewallRule.create(args);
  }
  async updateFirewallRule(
    args: Prisma.FirewallRuleUpdateArgs
  ): Promise<PrismaFirewallRule> {
    return this.prisma.firewallRule.update(args);
  }
  async deleteFirewallRule(
    args: Prisma.FirewallRuleDeleteArgs
  ): Promise<PrismaFirewallRule> {
    return this.prisma.firewallRule.delete(args);
  }

  async getWebsite(parentId: string): Promise<PrismaWebsite | null> {
    return this.prisma.firewallRule
      .findUnique({
        where: { id: parentId },
      })
      .website();
  }

  async getTenant(parentId: string): Promise<PrismaTenant | null> {
    return this.prisma.firewallRule
      .findUnique({
        where: { id: parentId },
      })
      .tenant();
  }
}
