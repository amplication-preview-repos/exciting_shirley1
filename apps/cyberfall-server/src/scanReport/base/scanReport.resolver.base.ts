/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { ScanReport } from "./ScanReport";
import { ScanReportCountArgs } from "./ScanReportCountArgs";
import { ScanReportFindManyArgs } from "./ScanReportFindManyArgs";
import { ScanReportFindUniqueArgs } from "./ScanReportFindUniqueArgs";
import { CreateScanReportArgs } from "./CreateScanReportArgs";
import { UpdateScanReportArgs } from "./UpdateScanReportArgs";
import { DeleteScanReportArgs } from "./DeleteScanReportArgs";
import { Website } from "../../website/base/Website";
import { Tenant } from "../../tenant/base/Tenant";
import { ScanReportService } from "../scanReport.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => ScanReport)
export class ScanReportResolverBase {
  constructor(
    protected readonly service: ScanReportService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "ScanReport",
    action: "read",
    possession: "any",
  })
  async _scanReportsMeta(
    @graphql.Args() args: ScanReportCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [ScanReport])
  @nestAccessControl.UseRoles({
    resource: "ScanReport",
    action: "read",
    possession: "any",
  })
  async scanReports(
    @graphql.Args() args: ScanReportFindManyArgs
  ): Promise<ScanReport[]> {
    return this.service.scanReports(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => ScanReport, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "ScanReport",
    action: "read",
    possession: "own",
  })
  async scanReport(
    @graphql.Args() args: ScanReportFindUniqueArgs
  ): Promise<ScanReport | null> {
    const result = await this.service.scanReport(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => ScanReport)
  @nestAccessControl.UseRoles({
    resource: "ScanReport",
    action: "create",
    possession: "any",
  })
  async createScanReport(
    @graphql.Args() args: CreateScanReportArgs
  ): Promise<ScanReport> {
    return await this.service.createScanReport({
      ...args,
      data: {
        ...args.data,

        website: args.data.website
          ? {
              connect: args.data.website,
            }
          : undefined,

        tenant: args.data.tenant
          ? {
              connect: args.data.tenant,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => ScanReport)
  @nestAccessControl.UseRoles({
    resource: "ScanReport",
    action: "update",
    possession: "any",
  })
  async updateScanReport(
    @graphql.Args() args: UpdateScanReportArgs
  ): Promise<ScanReport | null> {
    try {
      return await this.service.updateScanReport({
        ...args,
        data: {
          ...args.data,

          website: args.data.website
            ? {
                connect: args.data.website,
              }
            : undefined,

          tenant: args.data.tenant
            ? {
                connect: args.data.tenant,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => ScanReport)
  @nestAccessControl.UseRoles({
    resource: "ScanReport",
    action: "delete",
    possession: "any",
  })
  async deleteScanReport(
    @graphql.Args() args: DeleteScanReportArgs
  ): Promise<ScanReport | null> {
    try {
      return await this.service.deleteScanReport(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Website, {
    nullable: true,
    name: "website",
  })
  @nestAccessControl.UseRoles({
    resource: "Website",
    action: "read",
    possession: "any",
  })
  async getWebsite(
    @graphql.Parent() parent: ScanReport
  ): Promise<Website | null> {
    const result = await this.service.getWebsite(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Tenant, {
    nullable: true,
    name: "tenant",
  })
  @nestAccessControl.UseRoles({
    resource: "Tenant",
    action: "read",
    possession: "any",
  })
  async getTenant(
    @graphql.Parent() parent: ScanReport
  ): Promise<Tenant | null> {
    const result = await this.service.getTenant(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
