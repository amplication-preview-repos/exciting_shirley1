/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  ScanReport as PrismaScanReport,
  Website as PrismaWebsite,
  Tenant as PrismaTenant,
} from "@prisma/client";

export class ScanReportServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.ScanReportCountArgs, "select">
  ): Promise<number> {
    return this.prisma.scanReport.count(args);
  }

  async scanReports(
    args: Prisma.ScanReportFindManyArgs
  ): Promise<PrismaScanReport[]> {
    return this.prisma.scanReport.findMany(args);
  }
  async scanReport(
    args: Prisma.ScanReportFindUniqueArgs
  ): Promise<PrismaScanReport | null> {
    return this.prisma.scanReport.findUnique(args);
  }
  async createScanReport(
    args: Prisma.ScanReportCreateArgs
  ): Promise<PrismaScanReport> {
    return this.prisma.scanReport.create(args);
  }
  async updateScanReport(
    args: Prisma.ScanReportUpdateArgs
  ): Promise<PrismaScanReport> {
    return this.prisma.scanReport.update(args);
  }
  async deleteScanReport(
    args: Prisma.ScanReportDeleteArgs
  ): Promise<PrismaScanReport> {
    return this.prisma.scanReport.delete(args);
  }

  async getWebsite(parentId: string): Promise<PrismaWebsite | null> {
    return this.prisma.scanReport
      .findUnique({
        where: { id: parentId },
      })
      .website();
  }

  async getTenant(parentId: string): Promise<PrismaTenant | null> {
    return this.prisma.scanReport
      .findUnique({
        where: { id: parentId },
      })
      .tenant();
  }
}
