/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { WebsiteService } from "../website.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { WebsiteCreateInput } from "./WebsiteCreateInput";
import { Website } from "./Website";
import { WebsiteFindManyArgs } from "./WebsiteFindManyArgs";
import { WebsiteWhereUniqueInput } from "./WebsiteWhereUniqueInput";
import { WebsiteUpdateInput } from "./WebsiteUpdateInput";
import { ScanReportFindManyArgs } from "../../scanReport/base/ScanReportFindManyArgs";
import { ScanReport } from "../../scanReport/base/ScanReport";
import { ScanReportWhereUniqueInput } from "../../scanReport/base/ScanReportWhereUniqueInput";
import { ThreatFindManyArgs } from "../../threat/base/ThreatFindManyArgs";
import { Threat } from "../../threat/base/Threat";
import { ThreatWhereUniqueInput } from "../../threat/base/ThreatWhereUniqueInput";
import { FirewallRuleFindManyArgs } from "../../firewallRule/base/FirewallRuleFindManyArgs";
import { FirewallRule } from "../../firewallRule/base/FirewallRule";
import { FirewallRuleWhereUniqueInput } from "../../firewallRule/base/FirewallRuleWhereUniqueInput";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class WebsiteControllerBase {
  constructor(
    protected readonly service: WebsiteService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Website })
  @nestAccessControl.UseRoles({
    resource: "Website",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async createWebsite(
    @common.Body() data: WebsiteCreateInput
  ): Promise<Website> {
    return await this.service.createWebsite({
      data: {
        ...data,

        user: data.user
          ? {
              connect: data.user,
            }
          : undefined,

        tenant: data.tenant
          ? {
              connect: data.tenant,
            }
          : undefined,
      },
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        name: true,
        url: true,

        user: {
          select: {
            id: true,
          },
        },

        tenant: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [Website] })
  @ApiNestedQuery(WebsiteFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Website",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async websites(@common.Req() request: Request): Promise<Website[]> {
    const args = plainToClass(WebsiteFindManyArgs, request.query);
    return this.service.websites({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        name: true,
        url: true,

        user: {
          select: {
            id: true,
          },
        },

        tenant: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Website })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Website",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async website(
    @common.Param() params: WebsiteWhereUniqueInput
  ): Promise<Website | null> {
    const result = await this.service.website({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        name: true,
        url: true,

        user: {
          select: {
            id: true,
          },
        },

        tenant: {
          select: {
            id: true,
          },
        },
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Website })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Website",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async updateWebsite(
    @common.Param() params: WebsiteWhereUniqueInput,
    @common.Body() data: WebsiteUpdateInput
  ): Promise<Website | null> {
    try {
      return await this.service.updateWebsite({
        where: params,
        data: {
          ...data,

          user: data.user
            ? {
                connect: data.user,
              }
            : undefined,

          tenant: data.tenant
            ? {
                connect: data.tenant,
              }
            : undefined,
        },
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          name: true,
          url: true,

          user: {
            select: {
              id: true,
            },
          },

          tenant: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Website })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Website",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async deleteWebsite(
    @common.Param() params: WebsiteWhereUniqueInput
  ): Promise<Website | null> {
    try {
      return await this.service.deleteWebsite({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          name: true,
          url: true,

          user: {
            select: {
              id: true,
            },
          },

          tenant: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/scanReports")
  @ApiNestedQuery(ScanReportFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "ScanReport",
    action: "read",
    possession: "any",
  })
  async findScanReports(
    @common.Req() request: Request,
    @common.Param() params: WebsiteWhereUniqueInput
  ): Promise<ScanReport[]> {
    const query = plainToClass(ScanReportFindManyArgs, request.query);
    const results = await this.service.findScanReports(params.id, {
      ...query,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        findings: true,
        status: true,

        website: {
          select: {
            id: true,
          },
        },

        tenant: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/scanReports")
  @nestAccessControl.UseRoles({
    resource: "Website",
    action: "update",
    possession: "any",
  })
  async connectScanReports(
    @common.Param() params: WebsiteWhereUniqueInput,
    @common.Body() body: ScanReportWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      scanReports: {
        connect: body,
      },
    };
    await this.service.updateWebsite({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/scanReports")
  @nestAccessControl.UseRoles({
    resource: "Website",
    action: "update",
    possession: "any",
  })
  async updateScanReports(
    @common.Param() params: WebsiteWhereUniqueInput,
    @common.Body() body: ScanReportWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      scanReports: {
        set: body,
      },
    };
    await this.service.updateWebsite({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/scanReports")
  @nestAccessControl.UseRoles({
    resource: "Website",
    action: "update",
    possession: "any",
  })
  async disconnectScanReports(
    @common.Param() params: WebsiteWhereUniqueInput,
    @common.Body() body: ScanReportWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      scanReports: {
        disconnect: body,
      },
    };
    await this.service.updateWebsite({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/threats")
  @ApiNestedQuery(ThreatFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Threat",
    action: "read",
    possession: "any",
  })
  async findThreats(
    @common.Req() request: Request,
    @common.Param() params: WebsiteWhereUniqueInput
  ): Promise<Threat[]> {
    const query = plainToClass(ThreatFindManyArgs, request.query);
    const results = await this.service.findThreats(params.id, {
      ...query,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        description: true,
        level: true,
        mitigated: true,

        website: {
          select: {
            id: true,
          },
        },

        tenant: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/threats")
  @nestAccessControl.UseRoles({
    resource: "Website",
    action: "update",
    possession: "any",
  })
  async connectThreats(
    @common.Param() params: WebsiteWhereUniqueInput,
    @common.Body() body: ThreatWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      threats: {
        connect: body,
      },
    };
    await this.service.updateWebsite({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/threats")
  @nestAccessControl.UseRoles({
    resource: "Website",
    action: "update",
    possession: "any",
  })
  async updateThreats(
    @common.Param() params: WebsiteWhereUniqueInput,
    @common.Body() body: ThreatWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      threats: {
        set: body,
      },
    };
    await this.service.updateWebsite({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/threats")
  @nestAccessControl.UseRoles({
    resource: "Website",
    action: "update",
    possession: "any",
  })
  async disconnectThreats(
    @common.Param() params: WebsiteWhereUniqueInput,
    @common.Body() body: ThreatWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      threats: {
        disconnect: body,
      },
    };
    await this.service.updateWebsite({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/firewallRules")
  @ApiNestedQuery(FirewallRuleFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "FirewallRule",
    action: "read",
    possession: "any",
  })
  async findFirewallRules(
    @common.Req() request: Request,
    @common.Param() params: WebsiteWhereUniqueInput
  ): Promise<FirewallRule[]> {
    const query = plainToClass(FirewallRuleFindManyArgs, request.query);
    const results = await this.service.findFirewallRules(params.id, {
      ...query,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        ruleName: true,
        ruleDetails: true,

        website: {
          select: {
            id: true,
          },
        },

        tenant: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/firewallRules")
  @nestAccessControl.UseRoles({
    resource: "Website",
    action: "update",
    possession: "any",
  })
  async connectFirewallRules(
    @common.Param() params: WebsiteWhereUniqueInput,
    @common.Body() body: FirewallRuleWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      firewallRules: {
        connect: body,
      },
    };
    await this.service.updateWebsite({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/firewallRules")
  @nestAccessControl.UseRoles({
    resource: "Website",
    action: "update",
    possession: "any",
  })
  async updateFirewallRules(
    @common.Param() params: WebsiteWhereUniqueInput,
    @common.Body() body: FirewallRuleWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      firewallRules: {
        set: body,
      },
    };
    await this.service.updateWebsite({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/firewallRules")
  @nestAccessControl.UseRoles({
    resource: "Website",
    action: "update",
    possession: "any",
  })
  async disconnectFirewallRules(
    @common.Param() params: WebsiteWhereUniqueInput,
    @common.Body() body: FirewallRuleWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      firewallRules: {
        disconnect: body,
      },
    };
    await this.service.updateWebsite({
      where: params,
      data,
      select: { id: true },
    });
  }
}
